services:
  flask_api:
    build:
      context: ./api
    container_name: flask_api
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DB_HOST=postgres
      - DB_NAME=transactions
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    networks:
      - monitoring

  alert_bot:
      build:
        context: ./alert_bot
      container_name: alert_bot
      ports:
        - "5000:5000"
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
      environment:
        - DOCKER_API_VERSION=auto
      networks:
        - monitoring
        
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alert_rules.yml:/etc/prometheus/alert_rules.yml
    networks:
      - monitoring

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: transactions
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - monitoring

  alertmanager:
      image: prom/alertmanager
      container_name: alertmanager
      ports:
        - "9093:9093"
      volumes:
        - ./alertm_config.yml:/etc/alertmanager/config.yml
      command:
        - '--config.file=/etc/alertmanager/config.yml'
      networks:
        - monitoring

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml
      - ./dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    networks:
      - monitoring

  node_exporter:
    image: prom/node-exporter
    container_name: node_exporter
    ports:
      - "9100:9100"
    networks:
      - monitoring

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: cadvisor
    ports:
      - "8080:8080"
    networks:
      - monitoring

  loki:
      image: grafana/loki:2.9.0
      container_name: loki
      ports:
        - "3100:3100"
      command: -config.file=/etc/loki/local-config.yaml
      volumes:
        - loki_data:/tmp/loki
      networks:
        - monitoring

  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
     - loki
    networks:
      - monitoring

  tempo:
    image: grafana/tempo:2.3.0
    container_name: tempo
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
    - ./tempo-config.yml:/etc/tempo.yaml
    - tempo_data:/tmp/tempo
    ports:
        - "3200:3200"   # Tempo HTTP
        - "4317:4317"   # OTLP gRPC
        - "4318:4318"   # OTLP HTTP
    networks:
        - monitoring

  otel-collector:
      image: otel/opentelemetry-collector:0.91.0
      container_name: otel-collector
      command: ["--config=/etc/otel-collector-config.yaml"]
      volumes:
        - ./otel-collector-config.yml:/etc/otel-collector-config.yaml
      ports:
        - "4319:4318"   # OTLP HTTP receiver
      depends_on:
        - tempo
      networks:
        - monitoring

networks:
  monitoring:
    driver: bridge

volumes:
  postgres_data:
  tempo_data:
  loki_data: